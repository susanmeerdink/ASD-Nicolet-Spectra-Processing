import java.awt.Container;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;

import javax.swing.*;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.ui.RectangleEdge;

import static java.lang.Math.sqrt;

public class GUI_Avg_Spectra extends JPanel implements ActionListener {
	//Member Variables for GUI
	private ArrayList<Spectra> allSpectra = new ArrayList<Spectra>(); //Holds spectra ALL of them
	private ArrayList<SpectraFileList> allSpectraFileList = new ArrayList<SpectraFileList>(); //holds the file specifications
	private ArrayList<Spectra> avgAllSpectra = new ArrayList<Spectra>(); //Holds the averaged spectra
	private ArrayList<Spectra> stdAllSpectra = new ArrayList<Spectra>(); //Holds the averaged spectra
	private int currentSample = 0;
	private FileOutputStream fout;
	private boolean finalFlag = false;

	private ArrayList<Spectra> displaySpectra = new ArrayList<Spectra>();
	private XYSeriesCollection data = new XYSeriesCollection();
	private Double[] wavelengthsASD = {0.35,0.351,0.352,0.353,0.354,0.355,0.356,0.357,0.358,0.359,0.36,0.361,0.362,0.363,0.364,0.365,0.366,0.367,0.368,0.369,0.37,0.371,0.372,0.373,0.374,0.375,0.376,0.377,0.378,0.379,0.38,0.381,0.382,0.383,0.384,0.385,0.386,0.387,0.388,0.389,0.39,0.391,0.392,0.393,0.394,0.395,0.396,0.397,0.398,0.399,0.4,0.401,0.402,0.403,0.404,0.405,0.406,0.407,0.408,0.409,0.41,0.411,0.412,0.413,0.414,0.415,0.416,0.417,0.418,0.419,0.42,0.421,0.422,0.423,0.424,0.425,0.426,0.427,0.428,0.429,0.43,0.431,0.432,0.433,0.434,0.435,0.436,0.437,0.438,0.439,0.44,0.441,0.442,0.443,0.444,0.445,0.446,0.447,0.448,0.449,0.45,0.451,0.452,0.453,0.454,0.455,0.456,0.457,0.458,0.459,0.46,0.461,0.462,0.463,0.464,0.465,0.466,0.467,0.468,0.469,0.47,0.471,0.472,0.473,0.474,0.475,0.476,0.477,0.478,0.479,0.48,0.481,0.482,0.483,0.484,0.485,0.486,0.487,0.488,0.489,0.49,0.491,0.492,0.493,0.494,0.495,0.496,0.497,0.498,0.499,0.5,0.501,0.502,0.503,0.504,0.505,0.506,0.507,0.508,0.509,0.51,0.511,0.512,0.513,0.514,0.515,0.516,0.517,0.518,0.519,0.52,0.521,0.522,0.523,0.524,0.525,0.526,0.527,0.528,0.529,0.53,0.531,0.532,0.533,0.534,0.535,0.536,0.537,0.538,0.539,0.54,0.541,0.542,0.543,0.544,0.545,0.546,0.547,0.548,0.549,0.55,0.551,0.552,0.553,0.554,0.555,0.556,0.557,0.558,0.559,0.56,0.561,0.562,0.563,0.564,0.565,0.566,0.567,0.568,0.569,0.57,0.571,0.572,0.573,0.574,0.575,0.576,0.577,0.578,0.579,0.58,0.581,0.582,0.583,0.584,0.585,0.586,0.587,0.588,0.589,0.59,0.591,0.592,0.593,0.594,0.595,0.596,0.597,0.598,0.599,0.6,0.601,0.602,0.603,0.604,0.605,0.606,0.607,0.608,0.609,0.61,0.611,0.612,0.613,0.614,0.615,0.616,0.617,0.618,0.619,0.62,0.621,0.622,0.623,0.624,0.625,0.626,0.627,0.628,0.629,0.63,0.631,0.632,0.633,0.634,0.635,0.636,0.637,0.638,0.639,0.64,0.641,0.642,0.643,0.644,0.645,0.646,0.647,0.648,0.649,0.65,0.651,0.652,0.653,0.654,0.655,0.656,0.657,0.658,0.659,0.66,0.661,0.662,0.663,0.664,0.665,0.666,0.667,0.668,0.669,0.67,0.671,0.672,0.673,0.674,0.675,0.676,0.677,0.678,0.679,0.68,0.681,0.682,0.683,0.684,0.685,0.686,0.687,0.688,0.689,0.69,0.691,0.692,0.693,0.694,0.695,0.696,0.697,0.698,0.699,0.7,0.701,0.702,0.703,0.704,0.705,0.706,0.707,0.708,0.709,0.71,0.711,0.712,0.713,0.714,0.715,0.716,0.717,0.718,0.719,0.72,0.721,0.722,0.723,0.724,0.725,0.726,0.727,0.728,0.729,0.73,0.731,0.732,0.733,0.734,0.735,0.736,0.737,0.738,0.739,0.74,0.741,0.742,0.743,0.744,0.745,0.746,0.747,0.748,0.749,0.75,0.751,0.752,0.753,0.754,0.755,0.756,0.757,0.758,0.759,0.76,0.761,0.762,0.763,0.764,0.765,0.766,0.767,0.768,0.769,0.77,0.771,0.772,0.773,0.774,0.775,0.776,0.777,0.778,0.779,0.78,0.781,0.782,0.783,0.784,0.785,0.786,0.787,0.788,0.789,0.79,0.791,0.792,0.793,0.794,0.795,0.796,0.797,0.798,0.799,0.8,0.801,0.802,0.803,0.804,0.805,0.806,0.807,0.808,0.809,0.81,0.811,0.812,0.813,0.814,0.815,0.816,0.817,0.818,0.819,0.82,0.821,0.822,0.823,0.824,0.825,0.826,0.827,0.828,0.829,0.83,0.831,0.832,0.833,0.834,0.835,0.836,0.837,0.838,0.839,0.84,0.841,0.842,0.843,0.844,0.845,0.846,0.847,0.848,0.849,0.85,0.851,0.852,0.853,0.854,0.855,0.856,0.857,0.858,0.859,0.86,0.861,0.862,0.863,0.864,0.865,0.866,0.867,0.868,0.869,0.87,0.871,0.872,0.873,0.874,0.875,0.876,0.877,0.878,0.879,0.88,0.881,0.882,0.883,0.884,0.885,0.886,0.887,0.888,0.889,0.89,0.891,0.892,0.893,0.894,0.895,0.896,0.897,0.898,0.899,0.9,0.901,0.902,0.903,0.904,0.905,0.906,0.907,0.908,0.909,0.91,0.911,0.912,0.913,0.914,0.915,0.916,0.917,0.918,0.919,0.92,0.921,0.922,0.923,0.924,0.925,0.926,0.927,0.928,0.929,0.93,0.931,0.932,0.933,0.934,0.935,0.936,0.937,0.938,0.939,0.94,0.941,0.942,0.943,0.944,0.945,0.946,0.947,0.948,0.949,0.95,0.951,0.952,0.953,0.954,0.955,0.956,0.957,0.958,0.959,0.96,0.961,0.962,0.963,0.964,0.965,0.966,0.967,0.968,0.969,0.97,0.971,0.972,0.973,0.974,0.975,0.976,0.977,0.978,0.979,0.98,0.981,0.982,0.983,0.984,0.985,0.986,0.987,0.988,0.989,0.99,0.991,0.992,0.993,0.994,0.995,0.996,0.997,0.998,0.999,1.0,1.001,1.002,1.003,1.004,1.005,1.006,1.007,1.008,1.009,1.01,1.011,1.012,1.013,1.014,1.015,1.016,1.017,1.018,1.019,1.02,1.021,1.022,1.023,1.024,1.025,1.026,1.027,1.028,1.029,1.03,1.031,1.032,1.033,1.034,1.035,1.036,1.037,1.038,1.039,1.04,1.041,1.042,1.043,1.044,1.045,1.046,1.047,1.048,1.049,1.05,1.051,1.052,1.053,1.054,1.055,1.056,1.057,1.058,1.059,1.06,1.061,1.062,1.063,1.064,1.065,1.066,1.067,1.068,1.069,1.07,1.071,1.072,1.073,1.074,1.075,1.076,1.077,1.078,1.079,1.08,1.081,1.082,1.083,1.084,1.085,1.086,1.087,1.088,1.089,1.09,1.091,1.092,1.093,1.094,1.095,1.096,1.097,1.098,1.099,1.1,1.101,1.102,1.103,1.104,1.105,1.106,1.107,1.108,1.109,1.11,1.111,1.112,1.113,1.114,1.115,1.116,1.117,1.118,1.119,1.12,1.121,1.122,1.123,1.124,1.125,1.126,1.127,1.128,1.129,1.13,1.131,1.132,1.133,1.134,1.135,1.136,1.137,1.138,1.139,1.14,1.141,1.142,1.143,1.144,1.145,1.146,1.147,1.148,1.149,1.15,1.151,1.152,1.153,1.154,1.155,1.156,1.157,1.158,1.159,1.16,1.161,1.162,1.163,1.164,1.165,1.166,1.167,1.168,1.169,1.17,1.171,1.172,1.173,1.174,1.175,1.176,1.177,1.178,1.179,1.18,1.181,1.182,1.183,1.184,1.185,1.186,1.187,1.188,1.189,1.19,1.191,1.192,1.193,1.194,1.195,1.196,1.197,1.198,1.199,1.2,1.201,1.202,1.203,1.204,1.205,1.206,1.207,1.208,1.209,1.21,1.211,1.212,1.213,1.214,1.215,1.216,1.217,1.218,1.219,1.22,1.221,1.222,1.223,1.224,1.225,1.226,1.227,1.228,1.229,1.23,1.231,1.232,1.233,1.234,1.235,1.236,1.237,1.238,1.239,1.24,1.241,1.242,1.243,1.244,1.245,1.246,1.247,1.248,1.249,1.25,1.251,1.252,1.253,1.254,1.255,1.256,1.257,1.258,1.259,1.26,1.261,1.262,1.263,1.264,1.265,1.266,1.267,1.268,1.269,1.27,1.271,1.272,1.273,1.274,1.275,1.276,1.277,1.278,1.279,1.28,1.281,1.282,1.283,1.284,1.285,1.286,1.287,1.288,1.289,1.29,1.291,1.292,1.293,1.294,1.295,1.296,1.297,1.298,1.299,1.3,1.301,1.302,1.303,1.304,1.305,1.306,1.307,1.308,1.309,1.31,1.311,1.312,1.313,1.314,1.315,1.316,1.317,1.318,1.319,1.32,1.321,1.322,1.323,1.324,1.325,1.326,1.327,1.328,1.329,1.33,1.331,1.332,1.333,1.334,1.335,1.336,1.337,1.338,1.339,1.34,1.341,1.342,1.343,1.344,1.345,1.346,1.347,1.348,1.349,1.35,1.351,1.352,1.353,1.354,1.355,1.356,1.357,1.358,1.359,1.36,1.361,1.362,1.363,1.364,1.365,1.366,1.367,1.368,1.369,1.37,1.371,1.372,1.373,1.374,1.375,1.376,1.377,1.378,1.379,1.38,1.381,1.382,1.383,1.384,1.385,1.386,1.387,1.388,1.389,1.39,1.391,1.392,1.393,1.394,1.395,1.396,1.397,1.398,1.399,1.4,1.401,1.402,1.403,1.404,1.405,1.406,1.407,1.408,1.409,1.41,1.411,1.412,1.413,1.414,1.415,1.416,1.417,1.418,1.419,1.42,1.421,1.422,1.423,1.424,1.425,1.426,1.427,1.428,1.429,1.43,1.431,1.432,1.433,1.434,1.435,1.436,1.437,1.438,1.439,1.44,1.441,1.442,1.443,1.444,1.445,1.446,1.447,1.448,1.449,1.45,1.451,1.452,1.453,1.454,1.455,1.456,1.457,1.458,1.459,1.46,1.461,1.462,1.463,1.464,1.465,1.466,1.467,1.468,1.469,1.47,1.471,1.472,1.473,1.474,1.475,1.476,1.477,1.478,1.479,1.48,1.481,1.482,1.483,1.484,1.485,1.486,1.487,1.488,1.489,1.49,1.491,1.492,1.493,1.494,1.495,1.496,1.497,1.498,1.499,1.5,1.501,1.502,1.503,1.504,1.505,1.506,1.507,1.508,1.509,1.51,1.511,1.512,1.513,1.514,1.515,1.516,1.517,1.518,1.519,1.52,1.521,1.522,1.523,1.524,1.525,1.526,1.527,1.528,1.529,1.53,1.531,1.532,1.533,1.534,1.535,1.536,1.537,1.538,1.539,1.54,1.541,1.542,1.543,1.544,1.545,1.546,1.547,1.548,1.549,1.55,1.551,1.552,1.553,1.554,1.555,1.556,1.557,1.558,1.559,1.56,1.561,1.562,1.563,1.564,1.565,1.566,1.567,1.568,1.569,1.57,1.571,1.572,1.573,1.574,1.575,1.576,1.577,1.578,1.579,1.58,1.581,1.582,1.583,1.584,1.585,1.586,1.587,1.588,1.589,1.59,1.591,1.592,1.593,1.594,1.595,1.596,1.597,1.598,1.599,1.6,1.601,1.602,1.603,1.604,1.605,1.606,1.607,1.608,1.609,1.61,1.611,1.612,1.613,1.614,1.615,1.616,1.617,1.618,1.619,1.62,1.621,1.622,1.623,1.624,1.625,1.626,1.627,1.628,1.629,1.63,1.631,1.632,1.633,1.634,1.635,1.636,1.637,1.638,1.639,1.64,1.641,1.642,1.643,1.644,1.645,1.646,1.647,1.648,1.649,1.65,1.651,1.652,1.653,1.654,1.655,1.656,1.657,1.658,1.659,1.66,1.661,1.662,1.663,1.664,1.665,1.666,1.667,1.668,1.669,1.67,1.671,1.672,1.673,1.674,1.675,1.676,1.677,1.678,1.679,1.68,1.681,1.682,1.683,1.684,1.685,1.686,1.687,1.688,1.689,1.69,1.691,1.692,1.693,1.694,1.695,1.696,1.697,1.698,1.699,1.7,1.701,1.702,1.703,1.704,1.705,1.706,1.707,1.708,1.709,1.71,1.711,1.712,1.713,1.714,1.715,1.716,1.717,1.718,1.719,1.72,1.721,1.722,1.723,1.724,1.725,1.726,1.727,1.728,1.729,1.73,1.731,1.732,1.733,1.734,1.735,1.736,1.737,1.738,1.739,1.74,1.741,1.742,1.743,1.744,1.745,1.746,1.747,1.748,1.749,1.75,1.751,1.752,1.753,1.754,1.755,1.756,1.757,1.758,1.759,1.76,1.761,1.762,1.763,1.764,1.765,1.766,1.767,1.768,1.769,1.77,1.771,1.772,1.773,1.774,1.775,1.776,1.777,1.778,1.779,1.78,1.781,1.782,1.783,1.784,1.785,1.786,1.787,1.788,1.789,1.79,1.791,1.792,1.793,1.794,1.795,1.796,1.797,1.798,1.799,1.8,1.801,1.802,1.803,1.804,1.805,1.806,1.807,1.808,1.809,1.81,1.811,1.812,1.813,1.814,1.815,1.816,1.817,1.818,1.819,1.82,1.821,1.822,1.823,1.824,1.825,1.826,1.827,1.828,1.829,1.83,1.831,1.832,1.833,1.834,1.835,1.836,1.837,1.838,1.839,1.84,1.841,1.842,1.843,1.844,1.845,1.846,1.847,1.848,1.849,1.85,1.851,1.852,1.853,1.854,1.855,1.856,1.857,1.858,1.859,1.86,1.861,1.862,1.863,1.864,1.865,1.866,1.867,1.868,1.869,1.87,1.871,1.872,1.873,1.874,1.875,1.876,1.877,1.878,1.879,1.88,1.881,1.882,1.883,1.884,1.885,1.886,1.887,1.888,1.889,1.89,1.891,1.892,1.893,1.894,1.895,1.896,1.897,1.898,1.899,1.9,1.901,1.902,1.903,1.904,1.905,1.906,1.907,1.908,1.909,1.91,1.911,1.912,1.913,1.914,1.915,1.916,1.917,1.918,1.919,1.92,1.921,1.922,1.923,1.924,1.925,1.926,1.927,1.928,1.929,1.93,1.931,1.932,1.933,1.934,1.935,1.936,1.937,1.938,1.939,1.94,1.941,1.942,1.943,1.944,1.945,1.946,1.947,1.948,1.949,1.95,1.951,1.952,1.953,1.954,1.955,1.956,1.957,1.958,1.959,1.96,1.961,1.962,1.963,1.964,1.965,1.966,1.967,1.968,1.969,1.97,1.971,1.972,1.973,1.974,1.975,1.976,1.977,1.978,1.979,1.98,1.981,1.982,1.983,1.984,1.985,1.986,1.987,1.988,1.989,1.99,1.991,1.992,1.993,1.994,1.995,1.996,1.997,1.998,1.999,2.0,2.001,2.002,2.003,2.004,2.005,2.006,2.007,2.008,2.009,2.01,2.011,2.012,2.013,2.014,2.015,2.016,2.017,2.018,2.019,2.02,2.021,2.022,2.023,2.024,2.025,2.026,2.027,2.028,2.029,2.03,2.031,2.032,2.033,2.034,2.035,2.036,2.037,2.038,2.039,2.04,2.041,2.042,2.043,2.044,2.045,2.046,2.047,2.048,2.049,2.05,2.051,2.052,2.053,2.054,2.055,2.056,2.057,2.058,2.059,2.06,2.061,2.062,2.063,2.064,2.065,2.066,2.067,2.068,2.069,2.07,2.071,2.072,2.073,2.074,2.075,2.076,2.077,2.078,2.079,2.08,2.081,2.082,2.083,2.084,2.085,2.086,2.087,2.088,2.089,2.09,2.091,2.092,2.093,2.094,2.095,2.096,2.097,2.098,2.099,2.1,2.101,2.102,2.103,2.104,2.105,2.106,2.107,2.108,2.109,2.11,2.111,2.112,2.113,2.114,2.115,2.116,2.117,2.118,2.119,2.12,2.121,2.122,2.123,2.124,2.125,2.126,2.127,2.128,2.129,2.13,2.131,2.132,2.133,2.134,2.135,2.136,2.137,2.138,2.139,2.14,2.141,2.142,2.143,2.144,2.145,2.146,2.147,2.148,2.149,2.15,2.151,2.152,2.153,2.154,2.155,2.156,2.157,2.158,2.159,2.16,2.161,2.162,2.163,2.164,2.165,2.166,2.167,2.168,2.169,2.17,2.171,2.172,2.173,2.174,2.175,2.176,2.177,2.178,2.179,2.18,2.181,2.182,2.183,2.184,2.185,2.186,2.187,2.188,2.189,2.19,2.191,2.192,2.193,2.194,2.195,2.196,2.197,2.198,2.199,2.2,2.201,2.202,2.203,2.204,2.205,2.206,2.207,2.208,2.209,2.21,2.211,2.212,2.213,2.214,2.215,2.216,2.217,2.218,2.219,2.22,2.221,2.222,2.223,2.224,2.225,2.226,2.227,2.228,2.229,2.23,2.231,2.232,2.233,2.234,2.235,2.236,2.237,2.238,2.239,2.24,2.241,2.242,2.243,2.244,2.245,2.246,2.247,2.248,2.249,2.25,2.251,2.252,2.253,2.254,2.255,2.256,2.257,2.258,2.259,2.26,2.261,2.262,2.263,2.264,2.265,2.266,2.267,2.268,2.269,2.27,2.271,2.272,2.273,2.274,2.275,2.276,2.277,2.278,2.279,2.28,2.281,2.282,2.283,2.284,2.285,2.286,2.287,2.288,2.289,2.29,2.291,2.292,2.293,2.294,2.295,2.296,2.297,2.298,2.299,2.3,2.301,2.302,2.303,2.304,2.305,2.306,2.307,2.308,2.309,2.31,2.311,2.312,2.313,2.314,2.315,2.316,2.317,2.318,2.319,2.32,2.321,2.322,2.323,2.324,2.325,2.326,2.327,2.328,2.329,2.33,2.331,2.332,2.333,2.334,2.335,2.336,2.337,2.338,2.339,2.34,2.341,2.342,2.343,2.344,2.345,2.346,2.347,2.348,2.349,2.35,2.351,2.352,2.353,2.354,2.355,2.356,2.357,2.358,2.359,2.36,2.361,2.362,2.363,2.364,2.365,2.366,2.367,2.368,2.369,2.37,2.371,2.372,2.373,2.374,2.375,2.376,2.377,2.378,2.379,2.38,2.381,2.382,2.383,2.384,2.385,2.386,2.387,2.388,2.389,2.39,2.391,2.392,2.393,2.394,2.395,2.396,2.397,2.398,2.399,2.4,2.401,2.402,2.403,2.404,2.405,2.406,2.407,2.408,2.409,2.41,2.411,2.412,2.413,2.414,2.415,2.416,2.417,2.418,2.419,2.42,2.421,2.422,2.423,2.424,2.425,2.426,2.427,2.428,2.429,2.43,2.431,2.432,2.433,2.434,2.435,2.436,2.437,2.438,2.439,2.44,2.441,2.442,2.443,2.444,2.445,2.446,2.447,2.448,2.449,2.45,2.451,2.452,2.453,2.454,2.455,2.456,2.457,2.458,2.459,2.46,2.461,2.462,2.463,2.464,2.465,2.466,2.467,2.468,2.469,2.47,2.471,2.472,2.473,2.474,2.475,2.476,2.477,2.478,2.479,2.48,2.481,2.482,2.483,2.484,2.485,2.486,2.487,2.488,2.489,2.49,2.491,2.492,2.493,2.494,2.495,2.496,2.497,2.498,2.499,2.5};
			private Double[] wavelengthsNicolet = {2.5002,2.5014,2.5026,2.5038,2.5050,2.5062,2.5074,2.5087,2.5099,2.5111,2.5123,2.5135,2.5147,2.5160,2.5172,2.5184,2.5196,2.5209,2.5221,2.5233,2.5245,2.5258,2.5270,2.5282,2.5295,2.5307,2.5319,2.5332,2.5344,2.5356,2.5369,2.5381,2.5394,2.5406,2.5419,2.5431,2.5444,2.5456,2.5469,2.5481,2.5494,2.5506,2.5519,2.5531,2.5544,2.5556,2.5569,2.5582,2.5594,2.5607,2.5620,2.5632,2.5645,2.5658,2.5670,2.5683,2.5696,2.5708,2.5721,2.5734,2.5747,2.5760,2.5772,2.5785,2.5798,2.5811,2.5824,2.5837,2.5849,2.5862,2.5875,2.5888,2.5901,2.5914,2.5927,2.5940,2.5953,2.5966,2.5979,2.5992,2.6005,2.6018,2.6031,2.6044,2.6057,2.6070,2.6083,2.6097,2.6110,2.6123,2.6136,2.6149,2.6162,2.6176,2.6189,2.6202,2.6215,2.6229,2.6242,2.6255,2.6268,2.6282,2.6295,2.6308,2.6322,2.6335,2.6349,2.6362,2.6375,2.6389,2.6402,2.6416,2.6429,2.6443,2.6456,2.6470,2.6483,2.6497,2.6510,2.6524,2.6537,2.6551,2.6565,2.6578,2.6592,2.6605,2.6619,2.6633,2.6646,2.6660,2.6674,2.6688,2.6701,2.6715,2.6729,2.6743,2.6756,2.6770,2.6784,2.6798,2.6812,2.6826,2.6840,2.6853,2.6867,2.6881,2.6895,2.6909,2.6923,2.6937,2.6951,2.6965,2.6979,2.6993,2.7007,2.7021,2.7035,2.7050,2.7064,2.7078,2.7092,2.7106,2.7120,2.7134,2.7149,2.7163,2.7177,2.7191,2.7206,2.7220,2.7234,2.7249,2.7263,2.7277,2.7292,2.7306,2.7320,2.7335,2.7349,2.7364,2.7378,2.7392,2.7407,2.7421,2.7436,2.7450,2.7465,2.7480,2.7494,2.7509,2.7523,2.7538,2.7553,2.7567,2.7582,2.7597,2.7611,2.7626,2.7641,2.7655,2.7670,2.7685,2.7700,2.7715,2.7729,2.7744,2.7759,2.7774,2.7789,2.7804,2.7819,2.7834,2.7849,2.7863,2.7878,2.7893,2.7908,2.7924,2.7939,2.7954,2.7969,2.7984,2.7999,2.8014,2.8029,2.8044,2.8059,2.8075,2.8090,2.8105,2.8120,2.8136,2.8151,2.8166,2.8181,2.8197,2.8212,2.8228,2.8243,2.8258,2.8274,2.8289,2.8305,2.8320,2.8335,2.8351,2.8366,2.8382,2.8398,2.8413,2.8429,2.8444,2.8460,2.8476,2.8491,2.8507,2.8523,2.8538,2.8554,2.8570,2.8585,2.8601,2.8617,2.8633,2.8649,2.8664,2.8680,2.8696,2.8712,2.8728,2.8744,2.8760,2.8776,2.8792,2.8808,2.8824,2.8840,2.8856,2.8872,2.8888,2.8904,2.8920,2.8936,2.8953,2.8969,2.8985,2.9001,2.9017,2.9034,2.9050,2.9066,2.9082,2.9099,2.9115,2.9131,2.9148,2.9164,2.9181,2.9197,2.9213,2.9230,2.9246,2.9263,2.9279,2.9296,2.9313,2.9329,2.9346,2.9362,2.9379,2.9396,2.9412,2.9429,2.9446,2.9462,2.9479,2.9496,2.9513,2.9530,2.9546,2.9563,2.9580,2.9597,2.9614,2.9631,2.9648,2.9665,2.9682,2.9699,2.9716,2.9733,2.9750,2.9767,2.9784,2.9801,2.9818,2.9835,2.9853,2.9870,2.9887,2.9904,2.9921,2.9939,2.9956,2.9973,2.9991,3.0008,3.0025,3.0043,3.0060,3.0078,3.0095,3.0113,3.0130,3.0148,3.0165,3.0183,3.0200,3.0218,3.0236,3.0253,3.0271,3.0289,3.0306,3.0324,3.0342,3.0359,3.0377,3.0395,3.0413,3.0431,3.0449,3.0466,3.0484,3.0502,3.0520,3.0538,3.0556,3.0574,3.0592,3.0610,3.0628,3.0647,3.0665,3.0683,3.0701,3.0719,3.0737,3.0756,3.0774,3.0792,3.0810,3.0829,3.0847,3.0865,3.0884,3.0902,3.0921,3.0939,3.0958,3.0976,3.0995,3.1013,3.1032,3.1050,3.1069,3.1087,3.1106,3.1125,3.1144,3.1162,3.1181,3.1200,3.1219,3.1237,3.1256,3.1275,3.1294,3.1313,3.1332,3.1351,3.1370,3.1389,3.1408,3.1427,3.1446,3.1465,3.1484,3.1503,3.1522,3.1541,3.1561,3.1580,3.1599,3.1618,3.1638,3.1657,3.1676,3.1696,3.1715,3.1734,3.1754,3.1773,3.1793,3.1812,3.1832,3.1851,3.1871,3.1890,3.1910,3.1930,3.1949,3.1969,3.1989,3.2009,3.2028,3.2048,3.2068,3.2088,3.2108,3.2128,3.2148,3.2167,3.2187,3.2207,3.2227,3.2247,3.2268,3.2288,3.2308,3.2328,3.2348,3.2368,3.2388,3.2409,3.2429,3.2449,3.2470,3.2490,3.2510,3.2531,3.2551,3.2572,3.2592,3.2613,3.2633,3.2654,3.2674,3.2695,3.2715,3.2736,3.2757,3.2777,3.2798,3.2819,3.2840,3.2861,3.2881,3.2902,3.2923,3.2944,3.2965,3.2986,3.3007,3.3028,3.3049,3.3070,3.3091,3.3112,3.3134,3.3155,3.3176,3.3197,3.3218,3.3240,3.3261,3.3282,3.3304,3.3325,3.3347,3.3368,3.3390,3.3411,3.3433,3.3454,3.3476,3.3497,3.3519,3.3541,3.3562,3.3584,3.3606,3.3628,3.3650,3.3671,3.3693,3.3715,3.3737,3.3759,3.3781,3.3803,3.3825,3.3847,3.3869,3.3891,3.3914,3.3936,3.3958,3.3980,3.4003,3.4025,3.4047,3.4070,3.4092,3.4114,3.4137,3.4159,3.4182,3.4204,3.4227,3.4250,3.4272,3.4295,3.4318,3.4340,3.4363,3.4386,3.4409,3.4432,3.4454,3.4477,3.4500,3.4523,3.4546,3.4569,3.4592,3.4615,3.4639,3.4662,3.4685,3.4708,3.4731,3.4755,3.4778,3.4801,3.4825,3.4848,3.4872,3.4895,3.4918,3.4942,3.4966,3.4989,3.5013,3.5036,3.5060,3.5084,3.5108,3.5131,3.5155,3.5179,3.5203,3.5227,3.5251,3.5275,3.5299,3.5323,3.5347,3.5371,3.5395,3.5419,3.5444,3.5468,3.5492,3.5516,3.5541,3.5565,3.5590,3.5614,3.5638,3.5663,3.5687,3.5712,3.5737,3.5761,3.5786,3.5811,3.5835,3.5860,3.5885,3.5910,3.5935,3.5960,3.5985,3.6010,3.6035,3.6060,3.6085,3.6110,3.6135,3.6160,3.6186,3.6211,3.6236,3.6261,3.6287,3.6312,3.6338,3.6363,3.6389,3.6414,3.6440,3.6465,3.6491,3.6517,3.6543,3.6568,3.6594,3.6620,3.6646,3.6672,3.6698,3.6724,3.6750,3.6776,3.6802,3.6828,3.6854,3.6880,3.6907,3.6933,3.6959,3.6986,3.7012,3.7039,3.7065,3.7092,3.7118,3.7145,3.7171,3.7198,3.7225,3.7251,3.7278,3.7305,3.7332,3.7359,3.7386,3.7413,3.7440,3.7467,3.7494,3.7521,3.7548,3.7575,3.7603,3.7630,3.7657,3.7685,3.7712,3.7739,3.7767,3.7794,3.7822,3.7850,3.7877,3.7905,3.7933,3.7960,3.7988,3.8016,3.8044,3.8072,3.8100,3.8128,3.8156,3.8184,3.8212,3.8240,3.8269,3.8297,3.8325,3.8353,3.8382,3.8410,3.8439,3.8467,3.8496,3.8524,3.8553,3.8582,3.8611,3.8639,3.8668,3.8697,3.8726,3.8755,3.8784,3.8813,3.8842,3.8871,3.8900,3.8929,3.8959,3.8988,3.9017,3.9047,3.9076,3.9106,3.9135,3.9165,3.9194,3.9224,3.9254,3.9283,3.9313,3.9343,3.9373,3.9403,3.9433,3.9463,3.9493,3.9523,3.9553,3.9583,3.9613,3.9644,3.9674,3.9704,3.9735,3.9765,3.9796,3.9826,3.9857,3.9888,3.9918,3.9949,3.9980,4.0011,4.0042,4.0073,4.0104,4.0135,4.0166,4.0197,4.0228,4.0259,4.0291,4.0322,4.0353,4.0385,4.0416,4.0448,4.0479,4.0511,4.0543,4.0574,4.0606,4.0638,4.0670,4.0702,4.0734,4.0766,4.0798,4.0830,4.0862,4.0894,4.0927,4.0959,4.0991,4.1024,4.1056,4.1089,4.1121,4.1154,4.1187,4.1219,4.1252,4.1285,4.1318,4.1351,4.1384,4.1417,4.1450,4.1483,4.1516,4.1550,4.1583,4.1616,4.1650,4.1683,4.1717,4.1750,4.1784,4.1818,4.1851,4.1885,4.1919,4.1953,4.1987,4.2021,4.2055,4.2089,4.2123,4.2158,4.2192,4.2226,4.2261,4.2295,4.2330,4.2364,4.2399,4.2434,4.2468,4.2503,4.2538,4.2573,4.2608,4.2643,4.2678,4.2713,4.2748,4.2784,4.2819,4.2854,4.2890,4.2925,4.2961,4.2997,4.3032,4.3068,4.3104,4.3140,4.3176,4.3212,4.3248,4.3284,4.3320,4.3356,4.3392,4.3429,4.3465,4.3502,4.3538,4.3575,4.3611,4.3648,4.3685,4.3722,4.3759,4.3796,4.3833,4.3870,4.3907,4.3944,4.3981,4.4019,4.4056,4.4093,4.4131,4.4169,4.4206,4.4244,4.4282,4.4320,4.4357,4.4395,4.4434,4.4472,4.4510,4.4548,4.4586,4.4625,4.4663,4.4702,4.4740,4.4779,4.4818,4.4856,4.4895,4.4934,4.4973,4.5012,4.5051,4.5090,4.5130,4.5169,4.5208,4.5248,4.5287,4.5327,4.5367,4.5406,4.5446,4.5486,4.5526,4.5566,4.5606,4.5646,4.5686,4.5727,4.5767,4.5807,4.5848,4.5888,4.5929,4.5970,4.6011,4.6051,4.6092,4.6133,4.6174,4.6216,4.6257,4.6298,4.6340,4.6381,4.6422,4.6464,4.6506,4.6547,4.6589,4.6631,4.6673,4.6715,4.6757,4.6800,4.6842,4.6884,4.6927,4.6969,4.7012,4.7054,4.7097,4.7140,4.7183,4.7226,4.7269,4.7312,4.7355,4.7398,4.7442,4.7485,4.7529,4.7572,4.7616,4.7660,4.7704,4.7748,4.7792,4.7836,4.7880,4.7924,4.7968,4.8013,4.8057,4.8102,4.8147,4.8191,4.8236,4.8281,4.8326,4.8371,4.8416,4.8462,4.8507,4.8552,4.8598,4.8643,4.8689,4.8735,4.8781,4.8827,4.8873,4.8919,4.8965,4.9011,4.9058,4.9104,4.9151,4.9197,4.9244,4.9291,4.9338,4.9385,4.9432,4.9479,4.9526,4.9574,4.9621,4.9668,4.9716,4.9764,4.9812,4.9860,4.9908,4.9956,5.0004,5.0052,5.0100,5.0149,5.0197,5.0246,5.0295,5.0344,5.0393,5.0442,5.0491,5.0540,5.0589,5.0639,5.0688,5.0738,5.0787,5.0837,5.0887,5.0937,5.0987,5.1037,5.1088,5.1138,5.1188,5.1239,5.1290,5.1340,5.1391,5.1442,5.1493,5.1545,5.1596,5.1647,5.1699,5.1750,5.1802,5.1854,5.1906,5.1958,5.2010,5.2062,5.2114,5.2167,5.2219,5.2272,5.2325,5.2378,5.2431,5.2484,5.2537,5.2590,5.2644,5.2697,5.2751,5.2804,5.2858,5.2912,5.2966,5.3020,5.3075,5.3129,5.3183,5.3238,5.3293,5.3348,5.3403,5.3458,5.3513,5.3568,5.3623,5.3679,5.3735,5.3790,5.3846,5.3902,5.3958,5.4014,5.4071,5.4127,5.4184,5.4240,5.4297,5.4354,5.4411,5.4468,5.4526,5.4583,5.4641,5.4698,5.4756,5.4814,5.4872,5.4930,5.4988,5.5047,5.5105,5.5164,5.5222,5.5281,5.5340,5.5399,5.5459,5.5518,5.5578,5.5637,5.5697,5.5757,5.5817,5.5877,5.5937,5.5998,5.6058,5.6119,5.6180,5.6241,5.6302,5.6363,5.6424,5.6486,5.6547,5.6609,5.6671,5.6733,5.6795,5.6857,5.6920,5.6982,5.7045,5.7108,5.7171,5.7234,5.7297,5.7361,5.7424,5.7488,5.7551,5.7615,5.7680,5.7744,5.7808,5.7873,5.7937,5.8002,5.8067,5.8132,5.8197,5.8263,5.8328,5.8394,5.8460,5.8526,5.8592,5.8658,5.8725,5.8791,5.8858,5.8925,5.8992,5.9059,5.9126,5.9194,5.9262,5.9329,5.9397,5.9465,5.9534,5.9602,5.9671,5.9739,5.9808,5.9877,5.9947,6.0016,6.0086,6.0155,6.0225,6.0295,6.0365,6.0436,6.0506,6.0577,6.0648,6.0719,6.0790,6.0861,6.0933,6.1005,6.1076,6.1148,6.1221,6.1293,6.1366,6.1438,6.1511,6.1584,6.1657,6.1731,6.1804,6.1878,6.1952,6.2026,6.2100,6.2175,6.2250,6.2324,6.2399,6.2475,6.2550,6.2625,6.2701,6.2777,6.2853,6.2929,6.3006,6.3083,6.3159,6.3236,6.3314,6.3391,6.3469,6.3546,6.3624,6.3703,6.3781,6.3859,6.3938,6.4017,6.4096,6.4176,6.4255,6.4335,6.4415,6.4495,6.4575,6.4656,6.4736,6.4817,6.4898,6.4980,6.5061,6.5143,6.5225,6.5307,6.5390,6.5472,6.5555,6.5638,6.5721,6.5804,6.5888,6.5972,6.6056,6.6140,6.6225,6.6309,6.6394,6.6479,6.6565,6.6650,6.6736,6.6822,6.6908,6.6995,6.7081,6.7168,6.7255,6.7343,6.7430,6.7518,6.7606,6.7694,6.7783,6.7872,6.7961,6.8050,6.8139,6.8229,6.8319,6.8409,6.8499,6.8590,6.8681,6.8772,6.8863,6.8955,6.9046,6.9139,6.9231,6.9323,6.9416,6.9509,6.9603,6.9696,6.9790,6.9884,6.9978,7.0073,7.0168,7.0263,7.0358,7.0454,7.0550,7.0646,7.0742,7.0839,7.0936,7.1033,7.1130,7.1228,7.1326,7.1424,7.1523,7.1621,7.1720,7.1820,7.1919,7.2019,7.2119,7.2220,7.2321,7.2422,7.2523,7.2624,7.2726,7.2828,7.2931,7.3034,7.3137,7.3240,7.3344,7.3447,7.3552,7.3656,7.3761,7.3866,7.3971,7.4077,7.4183,7.4289,7.4396,7.4503,7.4610,7.4717,7.4825,7.4933,7.5042,7.5151,7.5260,7.5369,7.5479,7.5589,7.5699,7.5810,7.5921,7.6032,7.6144,7.6256,7.6368,7.6481,7.6594,7.6707,7.6821,7.6935,7.7049,7.7164,7.7278,7.7394,7.7510,7.7626,7.7742,7.7859,7.7976,7.8093,7.8211,7.8329,7.8448,7.8566,7.8686,7.8805,7.8925,7.9046,7.9166,7.9287,7.9409,7.9531,7.9653,7.9775,7.9898,8.0021,8.0145,8.0269,8.0394,8.0518,8.0644,8.0769,8.0895,8.1022,8.1148,8.1276,8.1403,8.1531,8.1660,8.1788,8.1918,8.2047,8.2177,8.2308,8.2439,8.2570,8.2702,8.2834,8.2966,8.3099,8.3233,8.3366,8.3501,8.3635,8.3770,8.3906,8.4042,8.4178,8.4315,8.4453,8.4590,8.4729,8.4867,8.5006,8.5146,8.5286,8.5426,8.5567,8.5709,8.5851,8.5993,8.6136,8.6279,8.6423,8.6567,8.6712,8.6857,8.7003,8.7149,8.7296,8.7443,8.7591,8.7739,8.7888,8.8037,8.8187,8.8337,8.8488,8.8639,8.8791,8.8943,8.9096,8.9249,8.9403,8.9558,8.9713,8.9868,9.0024,9.0181,9.0338,9.0495,9.0654,9.0812,9.0972,9.1132,9.1292,9.1453,9.1615,9.1777,9.1940,9.2103,9.2267,9.2431,9.2596,9.2762,9.2928,9.3095,9.3262,9.3430,9.3599,9.3768,9.3938,9.4109,9.4280,9.4451,9.4624,9.4797,9.4971,9.5145,9.5320,9.5495,9.5671,9.5848,9.6026,9.6204,9.6383,9.6562,9.6742,9.6923,9.7105,9.7287,9.7470,9.7653,9.7837,9.8022,9.8208,9.8394,9.8581,9.8769,9.8958,9.9147,9.9337,9.9528,9.9719,9.9911,10.0104,10.0298,10.0492,10.0687,10.0883,10.1080,10.1277,10.1475,10.1674,10.1874,10.2074,10.2276,10.2478,10.2681,10.2885,10.3089,10.3295,10.3501,10.3708,10.3916,10.4124,10.4334,10.4544,10.4755,10.4967,10.5180,10.5394,10.5609,10.5824,10.6041,10.6258,10.6476,10.6695,10.6915,10.7136,10.7358,10.7581,10.7804,10.8029,10.8254,10.8481,10.8708,10.8937,10.9166,10.9396,10.9628,10.9860,11.0093,11.0327,11.0563,11.0799,11.1036,11.1274,11.1514,11.1754,11.1995,11.2238,11.2481,11.2726,11.2971,11.3218,11.3466,11.3715,11.3965,11.4216,11.4468,11.4721,11.4975,11.5231,11.5487,11.5745,11.6004,11.6264,11.6525,11.6788,11.7052,11.7316,11.7582,11.7850,11.8118,11.8388,11.8659,11.8931,11.9204,11.9479,11.9755,12.0032,12.0311,12.0590,12.0871,12.1154,12.1438,12.1723,12.2009,12.2297,12.2586,12.2876,12.3168,12.3462,12.3756,12.4052,12.4350,12.4649,12.4949,12.5251,12.5554,12.5859,12.6165,12.6473,12.6782,12.7093,12.7405,12.7719,12.8034,12.8351,12.8670,12.8990,12.9311,12.9635,12.9960,13.0286,13.0614,13.0944,13.1276,13.1609,13.1944,13.2280,13.2619,13.2959,13.3300,13.3644,13.3989,13.4336,13.4685,13.5036,13.5389,13.5743,13.6099,13.6458,13.6818,13.7179,13.7543,13.7909,13.8277,13.8647,13.9018,13.9392,13.9768,14.0146,14.0525,14.0907,14.1291,14.1677,14.2065,14.2456,14.2848,14.3243,14.3639,14.4038,14.4440,14.4843,14.5249,14.5657,14.6067,14.6480,14.6895,14.7312,14.7732,14.8154,14.8578,14.9005,14.9435,14.9867,15.0301,15.0738,15.1177,15.1619,15.2064,15.2511,15.2961,15.3414,15.3869};
					
			//Member Variables for Chart
			private JFreeChart chart;
			private ChartPanel chartPanel ;
			private LegendTitle legend;
			private NumberAxis range;
			final static boolean shouldFill = true;
			private String chartTitle = "Visualize Spectra";
			private int chartType = 0; // 1 = ASD/VSWIR 2 = Nicolet/TIR
			
			//Menu Member Variables
			private JMenuItem menuOpt1 = new JMenuItem("Exit");
			private JMenuBar menubar = new JMenuBar(); // Our menu bar
			
			//Member variables for GUI
			private JFrame frame = new JFrame("Visualizing Spectra");
			private Container pane = frame.getContentPane();

			//Member Variables for JLists
			private SortedListModel allListModel = new SortedListModel();
			private SortedListModel dispListModel = new SortedListModel();
			private JList dispList = new JList(dispListModel);
			private JList allList= new JList(allListModel);
			private JScrollPane  allListScroll = new JScrollPane(allList);
			private JScrollPane  dispListScroll = new JScrollPane(dispList);
			
			//Member Variables for Buttons
			private JButton buttonLeft = new JButton("<<");
			private JButton buttonRight = new JButton(">>");
			private JButton buttonCancel = new JButton("Cancel");
			private JButton buttonNext = new JButton("Next");
			private JButton buttonBack = new JButton("Back");
			private JButton buttonAvg = new JButton("Average the Displayed Files");
			private JCheckBox checkLegend = new JCheckBox("Turn on Legend");
			
				
			//GUI Constructor
			public GUI_Avg_Spectra(int inType) throws IOException{
				super(true); // extending to the JPanel constructor
				chartType = inType;
				frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
				pane.setLayout(new GridBagLayout()); //Use GridBagLayout for GUI set up
				GridBagConstraints c = new GridBagConstraints();
						
				// Create Menu Bar Items
				frame.setJMenuBar(menubar);
				JMenu fileMenu = new JMenu("File");
				menubar.add(fileMenu);

				//Adding Menu options to File Menu
				fileMenu.add(menuOpt1);
				
				//add actionlistener to our sub-menu items
				menuOpt1.addActionListener(this); 
				buttonLeft.addActionListener(this);
				buttonRight.addActionListener(this);
				buttonCancel.addActionListener(this); 
				buttonNext.addActionListener(this);
				buttonAvg.addActionListener(this);
				buttonBack.addActionListener(this);
				checkLegend.addActionListener(this);
				
				//Create Chart Items
		        chart = createChart();
		        chartPanel = new ChartPanel(chart);
		                  
		        //Adding to Pane/Frame
		    	c.gridwidth = 1;
		    	c.gridheight = 2;
		    	c.gridx = 0;
		    	c.gridy = 0;
		        pane.add(chartPanel,c); //Added Chart
		        
		        JLabel dispName = new JLabel("Displayed Files");
		        c.anchor = GridBagConstraints.CENTER;
		        c.insets = new Insets(10,0,0,0);  //top padding
		    	c.gridwidth = 1;
		    	c.gridheight = 1;
		    	c.gridx = 1;
		    	c.gridy = 0;
		    	pane.add(dispName,c); //Add Label for Displayed Samples
		    	
		        JLabel allName = new JLabel("Not Displayed");
		    	c.gridx = 3;
		    	c.gridy = 0;
		    	pane.add(allName,c); //Add Label for Not Displayed

				c.gridx = 0;
				c.gridy = 2;
				pane.add(checkLegend, c); //check box that turns on and off legend

		    	c.gridx = 0;
		    	c.gridy = 3;
		    	JLabel graphProp = new JLabel("Click and drag to zoom on a specific section. Right click to access chart properties, zooming options, print, save, and copy.");
		    	pane.add(graphProp, c);
		        
		    	c.insets = new Insets(10,5,5,5);  //top and side padding
		    	c.anchor = GridBagConstraints.PAGE_START;
		    	c.gridheight = 2;
		    	c.gridx = 1;
		    	c.gridy = 1;
		    	dispListScroll.setPreferredSize(new Dimension(200, 400));
				pane.add(dispListScroll,c); //Add Scroll list for Displayed Samples
				
				c.gridx = 3;
				c.gridy = 1;
				allListScroll.setPreferredSize(new Dimension(200, 400));
				pane.add(allListScroll,c);//Add Scroll list for Not Displayed Samples
				
				c.gridheight = 1;
				c.gridx = 2;
				c.gridy = 1;
				pane.add(buttonLeft,c); // Add Button that moves things from Not displayed to displayed
				
				c.gridx = 2;
				c.gridy = 1;
				c.anchor = GridBagConstraints.CENTER;
				pane.add(buttonRight,c);// Add Button that moves things from displayed to Not displayed

				c.gridx = 0;
				c.gridy = 4;
				c.anchor = GridBagConstraints.WEST;
				pane.add(buttonBack,c);// Add Button that goes back a sample

				c.gridx = 0;
				c.gridy = 4;
				c.anchor = GridBagConstraints.CENTER;
				pane.add(buttonCancel,c);// Add Button that closes program
				
				c.gridx = 1;
				c.gridy = 4;
				c.anchor = GridBagConstraints.CENTER;
				pane.add(buttonAvg,c);// Add Button that averages the spectra displayed
				
				c.gridx = 3;
				c.gridy = 4;
				c.anchor = GridBagConstraints.EAST;
				pane.add(buttonNext,c);// Add Button that moves on to the next sample
				
				frame.pack();
				frame.setVisible(true);
		    }

			//Method that creates the chart 
			private JFreeChart createChart() {
				
				//Create Line Graph
				chart = ChartFactory.createXYLineChart(chartTitle, 
														"Wavelength (um)", 
														"Reflectance", 
														createDataset(),
														PlotOrientation.VERTICAL,
														true,true,false); 
				XYPlot xyPlot = (XYPlot) chart.getPlot();
				
				//Legend
				legend = chart.getLegend(); //Grab legend so can customize
				legend.setPosition(RectangleEdge.RIGHT); //Move legend to the right
				
				//Axis Properties
				NumberAxis domain = (NumberAxis) xyPlot.getDomainAxis(); //Get X axis
				range = (NumberAxis) xyPlot.getRangeAxis(); //Get y Axis


				if(chartType == 1){ //ASD/VSWIR spectra
					domain.setRange(0.35, 2.5);
			        domain.setTickUnit(new NumberTickUnit(0.1));
			        domain.setVerticalTickLabels(true);
					range.setRange(0,1.05); //Set Y Axis
			        //range.setTickUnit(new NumberTickUnit(0.05));

				}
				else if (chartType == 2){ //Nicolet/TIR Spectra
					domain.setRange(2.5, 15.5);
			        domain.setTickUnit(new NumberTickUnit(0.5));
			        domain.setVerticalTickLabels(true);
					range.setRange(0,1.05); //Set Y Axis
			        //range.setTickUnit(new NumberTickUnit(0.02));
				}
				else{ //default
					domain.setRange(0.35, 15);
			        domain.setTickUnit(new NumberTickUnit(1));
			        domain.setVerticalTickLabels(true);
			        //range.setTickUnit(new NumberTickUnit(0.1));
				}
		                
		        //Set display to lines with no shapes for points
		        XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
		        for (int i = 0;i<data.getSeriesCount();i++){      
		        	renderer.setSeriesLinesVisible(i, true);
		        	renderer.setSeriesShapesVisible(i, false); 
		        	xyPlot.setRenderer(renderer);
		        }
				return chart;
			}

			//Method that creates Data and adds it to the graph
			private XYDataset createDataset() {
				data.removeAllSeries(); //Remove all the was there 
				ArrayList<XYSeries> xyData = new ArrayList<XYSeries>(); //Create object that you can add 'Series' too
				double maxValue = 0; //Used for setting Y axis range
				//Cycle through the displayed Spectra list and add the data to the graph
				if(displaySpectra.size()>0){
					for (int i = 0;i<displaySpectra.size();i++){
						xyData.add(new XYSeries(displaySpectra.get(i).getSampleID()));
						//Code for adding ASD Spectra
						if (chartType == 1){
							for (int j =0;j<wavelengthsASD.length;j++){
								xyData.get(i).add(new XYDataItem((double) wavelengthsASD[j],(double)(displaySpectra.get(i).getRawvalues()[j])));
								if(displaySpectra.get(i).getRawvalues()[j] > maxValue && j < 900){
									maxValue = displaySpectra.get(i).getRawvalues()[j];
								}
							}
						}
						//Code for adding Nicolet Spectra
						else{
							for (int j =0;j<wavelengthsNicolet.length;j++){
								xyData.get(i).add(new XYDataItem((double) wavelengthsNicolet[j],(double)(displaySpectra.get(i).getRawvalues()[j])));
								if(displaySpectra.get(i).getRawvalues()[j] > maxValue && j < 900){
									maxValue = displaySpectra.get(i).getRawvalues()[j];
								}
							}
						}
						data.addSeries(xyData.get(i));
					}
					//Setting YAxis range
					maxValue = maxValue + (maxValue*0.3);
					range.setRange(0, maxValue);
				}
				return data;
			}
			
			private void setSampleDisplayed(){
				chartTitle = "Displayed Sample: " + allSpectraFileList.get(currentSample).getSampleID();
				chart.setTitle(chartTitle);
				displaySpectra.removeAll(displaySpectra);
				
				//Identifies Nicolet/TIR spectra and executes this code
				if (chartType == 2){
					//System.out.println("Length of file list:" + allSpectraFileList.get(currentSample).getListFiles().length);
					for (int j = 0;j<allSpectraFileList.get(currentSample).getListFiles().length;j++){
						for(int k = 0; k < allSpectra.size(); k++){
							if(allSpectraFileList.get(currentSample).getListFiles()[j].equals(allSpectra.get(k).getSampleID())){
								dispListModel.addElement(allSpectra.get(k).getSampleID());
								displaySpectra.add(allSpectra.get(k));
							}
						}
					}
					if(displaySpectra.isEmpty()){
						JOptionPane.showMessageDialog(frame,"Spectra file list does not match input filenames", "Input error",JOptionPane.ERROR_MESSAGE);
					}
				}
				//Identifies ASD/VSWIR spectra and executes this code
				if (chartType == 1){
					for (int i = allSpectraFileList.get(currentSample).getBegin();i<(allSpectraFileList.get(currentSample).getEnd()+1);i++) {
						dispListModel.addElement(allSpectra.get(i).getSampleID());
						displaySpectra.add(allSpectra.get(i));
						if (i > 20){ //If there are more than this number of spectra to be displayed remove the legend
							legend.setVisible(false);
						} else{
							legend.setVisible(true);
						}
					}
				}
				//Call createDataset method so that the new samples can be displayed on chart
				chart.getXYPlot().setDataset(createDataset());
			}
			
			//Grabs data gathered from input dialog box and assigns to main variables
			public void setVar(ArrayList<Spectra> allSpectraIn,ArrayList<SpectraFileList> allSpectraFileListIn,FileOutputStream foutIn){
				allSpectra = allSpectraIn;
				allSpectraFileList = allSpectraFileListIn;
				fout = foutIn;
				setSampleDisplayed();

				//Write to the file
				PrintWriter writer = new PrintWriter(new OutputStreamWriter(fout));
				writer.write("Wavelength,um,");
				if(chartType == 1) { //ASD/VSWIR spectra
					for (int k = 0; k<wavelengthsASD.length;k++){
						if( k <wavelengthsASD.length -1){
							writer.write(Double.toString(wavelengthsASD[k]) + ",");
						}
						else{
							writer.write(Double.toString(wavelengthsASD[k]) + "\r\n");
						}
						writer.flush();
					}
				}

				if(chartType == 2) { //Nicolet/TIR spectra
					for (int k = 0; k<wavelengthsNicolet.length;k++){
						if( k <wavelengthsNicolet.length -1){
							writer.write(Double.toString(wavelengthsNicolet[k]) + ",");
						}
						else{
							writer.write(Double.toString(wavelengthsNicolet[k]) + "\r\n");
						}
						writer.flush();
					}
				}
			}
			
			private void finalDisplay(){
				chartTitle = "Visualize Spectra";
				chart.setTitle(chartTitle);
				displaySpectra.removeAll(displaySpectra);
				dispListModel.clear();
				allListModel.clear();			
				for (int i = 0; i < avgAllSpectra.size(); i ++){
					dispListModel.addElement(avgAllSpectra.get(i).getSampleID());
					displaySpectra.add(avgAllSpectra.get(i));
				}
				finalFlag = true; //Set the final display flag to true

				//Call createDataset method so that the new samples can be displayed on chart
				chart.getXYPlot().setDataset(createDataset());
			}

			@Override
			public void actionPerformed(ActionEvent e) {
				//Action Performed if you select Exit on Menu
				if(e.getActionCommand().equals("Exit")){
					System.exit(0);//Close program
				}
				//Action Performed if you hit the Button that moves items from not displayed to displayed
				if (e.getActionCommand().equals("<<")){
					//Add to Display Lists and Spectra
					java.util.List selectedList = allList.getSelectedValuesList();
					displaySpectra.removeAll(displaySpectra);
					for (int j = 0; j < selectedList.size();j++){
						dispListModel.addElement(selectedList.get(j));
						allListModel.removeElement(selectedList.get(j));
					}

					//Loop through displayed List and find Spectra that matches name and put spectra in the Displayed Spectra ArrayList
					displaySpectra.removeAll(displaySpectra); //Remove all spectra previously located list
					if(finalFlag == false){
						for (int k = 0; k < dispListModel.getSize();k++){
							for (int i = 0; i<allSpectra.size();i++){
								if (dispListModel.getElementAt(k).toString() == allSpectra.get(i).getSampleID()){
									displaySpectra.add(allSpectra.get(i));
								}
							}
						}
						if (dispListModel.getSize() > 20){ //If there are more than this number of spectra to be displayed remove the legend
							legend.setVisible(false);
							checkLegend.setSelected(false);
						} else{
							legend.setVisible(true);
							checkLegend.setSelected(true);
						}
					}
					//Use at the end to view averaged samples
					else{
						for (int k = 0; k < dispListModel.getSize();k++){
							for (int i = 0; i<avgAllSpectra.size();i++){
								if (dispListModel.getElementAt(k).toString() == avgAllSpectra.get(i).getSampleID()){
									displaySpectra.add(avgAllSpectra.get(i));
								}
							}
						}
					}
					//Call createDataset method so that the new samples can be displayed on chart
					chart.getXYPlot().setDataset(createDataset());

					allList.clearSelection();//Clear selected items
					dispList.clearSelection();//Clear selected items
				}
				
				//Action Performed if you hit the Button that moves items from displayed to not displayed
				if (e.getActionCommand().equals(">>")){
					
					//Remove from Display Lists and Spectra
					java.util.List selectedList = dispList.getSelectedValuesList();
					for (int j = 0; j < selectedList.size();j++){
						allListModel.addElement(selectedList.get(j));
						dispListModel.removeElement(selectedList.get(j));
					}
					//Loop through displayed List and find Spectra that matches name and put spectra in the Displayed Spectra ArrayList
					displaySpectra.removeAll(displaySpectra); //Remove all spectra previously located list
					if(currentSample < allSpectraFileList.size() - 1){
						for (int k = 0; k < dispListModel.getSize();k++){
							for (int i = 0; i<allSpectra.size();i++){
								if (dispListModel.getElementAt(k).toString() == allSpectra.get(i).getSampleID()){
									displaySpectra.add(allSpectra.get(i));
								}
							}
						}
						if (dispListModel.getSize() > 20){ //If there are more than this number of spectra to be displayed remove the legend
							legend.setVisible(false);
							checkLegend.setSelected(false);
						} else{
							legend.setVisible(true);
							checkLegend.setSelected(true);
						}
					}
					//Use at the end to view averaged samples
					else{
						for (int k = 0; k < dispListModel.getSize();k++){
							for (int i = 0; i<avgAllSpectra.size();i++){
								if (dispListModel.getElementAt(k).toString() == avgAllSpectra.get(i).getSampleID()){
									displaySpectra.add(avgAllSpectra.get(i));
								}
							}
						}
						if (dispListModel.getSize() > 20){ //If there are more than this number of spectra to be displayed remove the legend
							legend.setVisible(false);
							checkLegend.setSelected(false);
						} else{
							legend.setVisible(true);
							checkLegend.setSelected(true);
						}
					}
					//Call createDataset method so that the new samples can be displayed on chart
					chart.getXYPlot().setDataset(createDataset());

					allList.clearSelection();//Clear selected items
					dispList.clearSelection();//Clear selected items
				}
				//Closes program and file
				if (e.getSource() == buttonCancel){
					try {
						fout.close();
					} catch (IOException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					System.exit(0);
				}
				//Moves onto the next sample in the file list
				if (e.getSource() == buttonNext){
					//if there are no more samples
					if(currentSample == allSpectraFileList.size() -1){
						finalDisplay();
						buttonNext.setVisible(false);
						buttonAvg.setVisible(false);
						buttonBack.setVisible(false);
						buttonCancel.setText("Done");
					}
					else{ //if there are more samples continue here...
						dispListModel.clear();
						allListModel.clear();
						currentSample = currentSample +1;
						setSampleDisplayed();
						buttonAvg.setVisible(true);
					}
				}

				//Moves onto the previous sample in the file list
				if (e.getSource() == buttonBack){
					//do not run if this is the first sample
					if(currentSample != 0){
						dispListModel.clear();
						allListModel.clear();
						currentSample = currentSample - 1;
						setSampleDisplayed();
						buttonAvg.setVisible(true);
					}
				}

				//Turns legend on and off
				if(e.getSource() == checkLegend){
					if(checkLegend.isSelected() == true){
						legend.setVisible(true);
					}else{
						legend.setVisible(false);
					}

				}

				//Averages the spectra displayed on the chart and writes it to the file
				if (e.getSource() == buttonAvg){
					buttonAvg.setVisible(false);//Turn button off

					//Averaging Spectra
					double[] avgSpectra = new double[displaySpectra.get(0).getRawvalues().length];//holds the averaged spectra
					int numFiles = displaySpectra.size();// used to divide and get the average
					double sum = 0;//used to sum of the values			
					for (int j = 0; j < displaySpectra.get(0).getRawvalues().length;j++){ //loop through columns
						for(int i = 0; i < displaySpectra.size(); i ++){ //loop through files
							sum = sum + displaySpectra.get(i).getRawvalues()[j]; //get the total sum
						}
						avgSpectra[j] = sum/numFiles; //get the average
						sum = 0; //reset sum for next column
					}


					//Standard Deviation of Spectra
					double[] stdSpectra = new double[displaySpectra.get(0).getRawvalues().length];//holds the standard deviation of spectra
					double dev = 0;
					double devSum = 0;
					for (int j = 0; j < displaySpectra.get(0).getRawvalues().length;j++){ //loop through columns
						for(int i = 0; i < displaySpectra.size(); i ++){ //loop through files
							dev = Math.pow(displaySpectra.get(i).getRawvalues()[j] - avgSpectra[j],2); //deviations of each data point from the mean
							devSum = devSum + dev;
						}
						stdSpectra[j] = sqrt(devSum/numFiles);
						devSum = 0; //reset sum for next column
					}

					//Adding to Avg and Std List
					if(avgAllSpectra.size() == 0){ //If the array is empty add the first item
						avgAllSpectra.add(new Spectra(allSpectraFileList.get(currentSample).getSampleID(),avgSpectra));
						stdAllSpectra.add(new Spectra(allSpectraFileList.get(currentSample).getSampleID(),stdSpectra));
					}else{ //for all other samples
						for(int i = 0; i < avgAllSpectra.size();i++){ //Loop through the averaged samples
							String currName = allSpectraFileList.get(currentSample).getSampleID(); //the sample id that is being added
							String testName = avgAllSpectra.get(i).getSampleID();
							if(currName.equals(testName) == true ){ //If a match is found, replace that value
								avgAllSpectra.set(i, new Spectra(allSpectraFileList.get(currentSample).getSampleID(),avgSpectra));
								stdAllSpectra.set(i, new Spectra(allSpectraFileList.get(currentSample).getSampleID(),stdSpectra));
								break;
							} else{
								if(i == avgAllSpectra.size()-1){ //If no matches have been found, add to the end
									avgAllSpectra.add(new Spectra(allSpectraFileList.get(currentSample).getSampleID(),avgSpectra));
									stdAllSpectra.add(new Spectra(allSpectraFileList.get(currentSample).getSampleID(),stdSpectra));
									break;
								} else{
									continue;
								}
							}
						}
					}

					//Update Chart
					displaySpectra.removeAll(displaySpectra);
					Spectra avgSpectraDisp = new Spectra(allSpectraFileList.get(currentSample).getSampleID(),avgSpectra);
					displaySpectra.add(avgSpectraDisp);
					dispListModel.clear();
					allListModel.clear();
					chart.getXYPlot().setDataset(createDataset());	
					
					//Write to the file
					//Write Averaged Spectra
					PrintWriter writer = new PrintWriter(new OutputStreamWriter(fout));
					writer.write(allSpectraFileList.get(currentSample).getSampleID() + ",AVG,");
					for (int k = 0; k<avgSpectra.length;k++){
						if( k <avgSpectra.length -1){
							writer.write(Double.toString(avgSpectra[k]) + ",");
						}
						else{
							writer.write(Double.toString(avgSpectra[k]) + "\r\n");
						}
						writer.flush();
					}
					//Write Standard deviation of Spectra
					writer.write(allSpectraFileList.get(currentSample).getSampleID() + ",STD,");
					for (int k = 0; k<stdSpectra.length;k++){
						if( k <stdSpectra.length -1){
							writer.write(Double.toString(stdSpectra[k]) + ",");
						}
						else{
							writer.write(Double.toString(stdSpectra[k]) + "\r\n");
						}
						writer.flush();
					}
				}

			}
}
